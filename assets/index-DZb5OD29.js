var x=i=>{throw TypeError(i)};var T=(i,t,e)=>t.has(i)||x("Cannot "+e);var d=(i,t,e)=>(T(i,t,"read from private field"),e?e.call(i):t.get(i)),b=(i,t,e)=>t.has(i)?x("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(i):t.set(i,e),w=(i,t,e,o)=>(T(i,t,"write to private field"),o?o.call(i,e):t.set(i,e),e),y=(i,t,e)=>(T(i,t,"access private method"),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))o(r);new MutationObserver(r=>{for(const n of r)if(n.type==="childList")for(const s of n.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&o(s)}).observe(document,{childList:!0,subtree:!0});function e(r){const n={};return r.integrity&&(n.integrity=r.integrity),r.referrerPolicy&&(n.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?n.credentials="include":r.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function o(r){if(r.ep)return;r.ep=!0;const n=e(r);fetch(r.href,n)}})();const K="modulepreload",J=function(i){return"/dicoding_web_intermidate_lastproject/"+i},N={},Y=function(t,e,o){let r=Promise.resolve();if(e&&e.length>0){document.getElementsByTagName("link");const s=document.querySelector("meta[property=csp-nonce]"),a=(s==null?void 0:s.nonce)||(s==null?void 0:s.getAttribute("nonce"));r=Promise.allSettled(e.map(c=>{if(c=J(c),c in N)return;N[c]=!0;const h=c.endsWith(".css"),f=h?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${f}`))return;const l=document.createElement("link");if(l.rel=h?"stylesheet":K,h||(l.as="script"),l.crossOrigin="",l.href=c,a&&l.setAttribute("nonce",a),document.head.appendChild(l),h)return new Promise((P,H)=>{l.addEventListener("load",P),l.addEventListener("error",()=>H(new Error(`Unable to preload CSS for ${c}`)))})}))}function n(s){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=s,window.dispatchEvent(a),!a.defaultPrevented)throw s}return r.then(s=>{for(const a of s||[])a.status==="rejected"&&n(a.reason);return t().catch(n)})},G="StoryAppDB",Q=1,S="stories",C=()=>new Promise((i,t)=>{const e=indexedDB.open(G,Q);e.onupgradeneeded=o=>{const r=o.target.result;r.objectStoreNames.contains(S)||r.createObjectStore(S,{keyPath:"id"})},e.onsuccess=()=>i(e.result),e.onerror=()=>t(e.error)}),X=async i=>{const e=(await C()).transaction(S,"readwrite"),o=e.objectStore(S);return i.forEach(r=>o.put(r)),new Promise(r=>e.oncomplete=r)},D=async()=>{const e=(await C()).transaction(S,"readonly").objectStore(S);return new Promise(o=>{e.getAll().onsuccess=r=>o(r.target.result)})};class R{constructor(){this._baseUrl="https://story-api.dicoding.dev/v1"}async getStories(){try{const t=localStorage.getItem("token"),o=await(await fetch(`${this._baseUrl}/stories`,{headers:{Authorization:`Bearer ${t}`}})).json();return await X(o.listStory),o.listStory}catch(t){return console.error("Failed to fetch from API, fallback to IndexedDB:",t),await D()}}async getStoryById(t){try{const e=localStorage.getItem("token");return(await(await fetch(`${this._baseUrl}/stories/${t}`,{headers:{Authorization:`Bearer ${e}`}})).json()).story}catch(e){return console.error("Failed to fetch story details:",e),(await D()).find(r=>r.id===t)}}async addStory(t){const e=localStorage.getItem("token");if(!e)throw new Error("You must be logged in to submit a story");const o=await fetch(`${this._baseUrl}/stories`,{method:"POST",headers:{Authorization:`Bearer ${e}`},body:t}),r=await o.json();if(!o.ok)throw new Error(r.message||"Failed to submit story");return r.story}}const Z="StoryAppFavoritesDB",ee=1,m="favoriteStories",_=()=>new Promise((i,t)=>{const e=indexedDB.open(Z,ee);e.onupgradeneeded=o=>{const r=o.target.result;r.objectStoreNames.contains(m)||r.createObjectStore(m,{keyPath:"id"})},e.onsuccess=()=>i(e.result),e.onerror=()=>t(e.error)}),te=async i=>{const e=(await _()).transaction(m,"readwrite"),o=e.objectStore(m),r={...i,favoriteTimestamp:new Date().getTime()};return o.put(r),new Promise(n=>{e.oncomplete=()=>n(!0),e.onerror=()=>n(!1)})},I=async()=>{const e=(await _()).transaction(m,"readonly").objectStore(m);return new Promise(o=>{e.getAll().onsuccess=r=>o(r.target.result)})},j=async i=>{const o=(await _()).transaction(m,"readonly").objectStore(m);return new Promise(r=>{o.get(i).onsuccess=n=>r(!!n.target.result)})},M=async i=>{const e=(await _()).transaction(m,"readwrite");return e.objectStore(m).delete(i),new Promise(r=>{e.oncomplete=()=>r(!0),e.onerror=()=>r(!1)})};function oe(i){try{const t="=".repeat((4-i.length%4)%4),e=(i+t).replace(/\-/g,"+").replace(/_/g,"/"),o=window.atob(e),r=new Uint8Array(o.length);for(let n=0;n<o.length;++n)r[n]=o.charCodeAt(n);return r}catch(t){throw console.error("Error converting base64 to Uint8Array:",t),t}}function O(){return"serviceWorker"in navigator&&"PushManager"in window}async function A(){if(!O())return console.warn("Push notifications not supported in this browser"),null;try{return await navigator.serviceWorker.ready}catch(i){return console.error("Error getting service worker registration:",i),null}}async function B(){try{const i=await A();if(!i)return console.error("No service worker registration found"),!1;if(await Notification.requestPermission()!=="granted")return console.log("Notification permission denied"),!1;let e=await i.pushManager.getSubscription();if(e)return console.log("User is already subscribed to push notifications"),await $(e),e;const o="BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk";return console.log("Subscribing to push notifications with VAPID key"),e=await i.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:oe(o)}),console.log("User successfully subscribed to push notifications"),await $(e)?e:!1}catch(i){return console.error("Error subscribing to push notifications:",i),!1}}async function $(i){if(!i)return console.error("No subscription provided"),!1;const t=localStorage.getItem("token");if(!t)return console.error("User token not found"),!1;try{console.log("Sending subscription to server");let e,o;try{const a=i.toJSON().keys;if(!a)throw new Error("Subscription keys not found");e=a.p256dh,o=a.auth,(!e||!o)&&(e=btoa(String.fromCharCode.apply(null,new Uint8Array(i.getKey("p256dh")))),o=btoa(String.fromCharCode.apply(null,new Uint8Array(i.getKey("auth")))))}catch(a){throw console.error("Error encoding subscription keys:",a),new Error("Failed to encode subscription keys")}if(!i.endpoint||!e||!o)throw new Error("Subscription data is incomplete");const r={endpoint:i.endpoint,keys:{p256dh:e,auth:o}};console.log("Formatted subscription data ready to send",r);const n=await fetch("https://story-api.dicoding.dev/v1/notifications/subscribe",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(r)}),s=await n.json();if(!n.ok)throw new Error(s.message||"Failed to send subscription to server");return console.log("Subscription sent to server successfully:",s),!0}catch(e){return console.error("Error sending subscription to server:",e),!1}}async function U(i){if(!i)return console.error("Insufficient story data for notification"),!1;const t=localStorage.getItem("token");if(!t)return console.error("User token not found"),!1;try{console.log("Sending notification for story:",i);const e=i.description||"New story added",o={title:"Story berhasil dibuat",options:{body:`Anda telah membuat story baru dengan deskripsi: ${e.substring(0,50)+(e.length>50?"...":"")}`}};console.log("Sending notification with data:",o);try{const r=await fetch("https://story-api.dicoding.dev/v1/notifications/send",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(o)});if(r.ok){const n=await r.json();return console.log("Push notification API response:",n),!0}else try{const n=await r.json();throw new Error(n.message||`Failed with status: ${r.status}`)}catch{throw new Error(`Failed with status: ${r.status}`)}}catch(r){console.error("API error sending notification:",r),console.log("Trying direct notification through service worker...");const n=await navigator.serviceWorker.ready;if(n&&n.showNotification)return await n.showNotification("Story Added Successfully",{body:`You created a new story: ${e.substring(0,50)}${e.length>50?"...":""}`,icon:"/favicon.png"}),console.log("Local notification shown successfully"),!0;throw r}}catch(e){return console.error("Error sending notification:",e),!1}}async function q(){try{const i=await A();return i?!!await i.pushManager.getSubscription():!1}catch(i){return console.error("Error checking push subscription:",i),!1}}async function V(){try{const i=await A();if(!i)return!1;const t=await i.pushManager.getSubscription();return t?(await re(t),await t.unsubscribe()):!0}catch(i){return console.error("Error unsubscribing from push notifications:",i),!1}}async function re(i){if(!i||!i.endpoint)return console.error("Invalid subscription object"),!1;const t=localStorage.getItem("token");if(!t)return console.error("User token not found"),!1;try{const e=await fetch("https://story-api.dicoding.dev/v1/notifications/subscribe",{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({endpoint:i.endpoint})}),o=await e.json();if(!e.ok)throw new Error(o.message||"Failed to unsubscribe from server");return!0}catch(e){return console.error("Error unsubscribing from server:",e),!1}}const ie=Object.freeze(Object.defineProperty({__proto__:null,checkPushSubscription:q,isPushNotificationSupported:O,notifyNewStory:U,subscribeToPushNotification:B,unsubscribeFromPushNotification:V},Symbol.toStringTag,{value:"Module"}));class ne{constructor({view:t,model:e}){this._view=t,this._model=e||new R,this._currentView="all"}async init(){await this._loadStories(),this._initializeViewToggle(),this._setupPushNotification()}async _loadStories(){try{if(localStorage.getItem("token"))try{const e=await this._model.getStories();this._view.showStories(e)}catch(e){console.error("Error fetching stories with token:",e),localStorage.removeItem("token"),window.location.hash="#/login"}else window.location.hash="#/login"}catch(t){console.error("Error:",t);const e=await this._model.getStories();this._view.showStories(e)}}_initializeViewToggle(){const t=document.getElementById("view-all-stories"),e=document.getElementById("view-favorite-stories");!t||!e||(t.addEventListener("click",async()=>{t.classList.add("active"),e.classList.remove("active"),this._currentView="all";const o=await this._model.getStories();this._view.showStories(o)}),e.addEventListener("click",async()=>{t.classList.remove("active"),e.classList.add("active"),this._currentView="favorites";const o=await I();this._view.showStories(o)}))}async _setupPushNotification(){if("serviceWorker"in navigator&&"PushManager"in window)try{console.log("Setting up push notification subscription"),await B()?console.log("Successfully set up push notification"):console.warn("Failed to set up push notification or permission denied")}catch(t){console.error("Error setting up push notification:",t)}}async toggleFavorite(t,e){const r=(this._currentView==="all"?await this._model.getStories():await I()).find(s=>s.id===t);if(!r)return;await j(t)?(await M(t),e.classList.remove("favorited"),e.textContent="🤍",this._currentView==="favorites"&&this._view.removeStoryFromDisplay(t)):(await te(r),e.classList.add("favorited"),e.textContent="❤️")}}function W(i,t="en-US",e={}){return new Date(i).toLocaleDateString(t,{year:"numeric",month:"long",day:"numeric",...e})}class se{constructor(){this._presenter=new ne({view:this})}async render(){return`
      <a href="#main-content" class="skip-link" tabindex="0">Skip to Content</a>
      <section class="container">
        <div class="top-section">
          <h1>Home Page</h1>
          <div class="story-view-toggles">
            <button id="view-all-stories" class="view-toggle active">All Stories</button>
            <button id="view-favorite-stories" class="view-toggle">Favorite Stories</button>
          </div>
          <div class="new-story-btn"><a href="#/form">Add new story</a></div>
        </div>
        <div id="story-list" tabindex="-1"></div>
      </section>
    `}async afterRender(){const t=document.querySelector(".skip-link"),e=document.getElementById("story-list");if(t&&(t.addEventListener("click",o=>{o.preventDefault(),e.setAttribute("tabindex","0"),e.focus(),setTimeout(()=>e.setAttribute("tabindex","-1"),1e3)}),document.addEventListener("keydown",o=>{o.key==="Tab"&&!o.shiftKey&&document.activeElement===document.body&&(o.preventDefault(),t.focus())})),location.hostname==="localhost"||location.hostname==="127.0.0.1"){const o=document.createElement("div");o.style.marginTop="20px",o.style.padding="10px",o.style.border="1px dashed #ccc";const r=document.createElement("h3");r.textContent="Development Tools";const n=document.createElement("button");n.textContent="Test Push Notification",n.style.marginTop="10px",n.addEventListener("click",async()=>{try{const s=await navigator.serviceWorker.ready;s?(await s.showNotification("Test Notification",{body:"This is a test notification from the client",icon:"/favicon.png"}),console.log("Test notification shown successfully")):console.error("No service worker registration available")}catch(s){console.error("Error showing test notification:",s)}}),o.appendChild(r),o.appendChild(n),document.querySelector(".container").appendChild(o)}await this._presenter.init()}async showStories(t){const e=document.getElementById("story-list");if(!t||t.length===0){e.innerHTML=`
        <p class="empty-message">${this._presenter._currentView==="all"?"No stories available. Try turning on your internet connection to sync.":"You don't have any favorite stories yet."}</p>
      `;return}const o=await Promise.all(t.map(async r=>{const n=await j(r.id),s=W(r.createdAt);return`
        <article class="story-card" tabindex="-1" data-id="${r.id}">
          <div class="favorite-btn-container">
            <button class="favorite-btn ${n?"favorited":""}" data-id="${r.id}">
              ${n?"❤️":"🤍"}
            </button>
          </div>
          <img src="${r.photoUrl}" alt="${r.description}">
          <h3>${r.name}</h3>
          <p class="story-description">${r.description}</p>
          <p class="story-date"><small>Posted on: ${s}</small></p>
          ${r.lat&&r.lon?`
            <div class="story-map" id="map-${r.id}" style="height: 200px;"></div>
          `:""}
        </article>
      `}));if(e.innerHTML=o.join(""),document.querySelectorAll(".favorite-btn").forEach(r=>{r.addEventListener("click",async()=>{const n=r.dataset.id;await this._presenter.toggleFavorite(n,r)})}),t.forEach(r=>{if(r.lat&&r.lon){const n=document.getElementById(`map-${r.id}`);if(n){const s=L.map(n).setView([r.lat,r.lon],13);L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(s),L.marker([r.lat,r.lon]).addTo(s).bindPopup(`<b>${r.name}</b><br>${r.description}`)}}}),document.activeElement===document.querySelector(".skip-link")){const r=e.querySelector(".story-card");r&&(r.setAttribute("tabindex","0"),r.focus(),r.addEventListener("blur",()=>{r.setAttribute("tabindex","-1")},{once:!0}))}}removeStoryFromDisplay(t){const e=document.querySelector(`.story-card[data-id="${t}"]`);e&&(e.classList.add("removing"),setTimeout(()=>{e.remove(),document.querySelectorAll(".story-card").length===0&&(document.getElementById("story-list").innerHTML=`<p class="empty-message">You don't have any favorite stories yet.</p>`)},300))}}class ae{async render(){return`
      <section class="container">
        <h1>About Page</h1>
      </section>
    `}async afterRender(){}}class ce{constructor({view:t,model:e}){this._view=t,this._model=e||new R}async init(){this._view.initCamera(),this._view.initMap(),this._initFormSubmission(),"serviceWorker"in navigator&&"PushManager"in window&&await this._setupPushNotification()}async _setupPushNotification(){try{console.log("Setting up push notification in form page"),await B()&&console.log("Push notification subscription successful")}catch(t){console.error("Error setting up push notification:",t)}}_initFormSubmission(){const t=document.getElementById("story-form"),e=document.getElementById("photo");!t||!e||(e.addEventListener("change",()=>{const o=e.files[0];o&&o.size>1e6&&(this._view.showError("Photo size exceeds 1MB. Please choose a smaller photo."),e.value="")}),t.addEventListener("submit",async o=>{if(o.preventDefault(),!localStorage.getItem("token")){this._view.showError("You must be logged in first.");return}const n=new FormData(t),s=n.get("photo"),a=n.get("description");if(s&&s.size>1e6){this._view.showError("Photo size exceeds 1MB limit. Please compress it first.");return}try{const c=t.querySelector('button[type="submit"]');c&&(c.textContent="Submitting...",c.disabled=!0);const h=await this._model.addStory(n);console.log("Story added response:",h);const f=h;this._view.showSuccess("Story added successfully!");try{if(a){console.log("Preparing to send notification for new story");const l={id:(f==null?void 0:f.id)||"new-story",description:a};console.log("Notification data:",l),await U(l)}else console.log("No description available for notification")}catch(l){console.error("Error sending notification:",l)}setTimeout(()=>{window.location.hash="#/"},1e3)}catch(c){console.error("Failed to add story:",c),this._view.showError(c.message||"Failed to add story. Please try again."),submitButton&&(submitButton.textContent="Submit",submitButton.disabled=!1)}}))}}class le{constructor(){this._presenter=new ce({view:this}),this.stream=null}async render(){return`
      <section class="container">
        <h1>Tambah Story Baru</h1>
        <div id="form-alert" class="alert" style="display: none;"></div>
        <form id="story-form">
          <div class="form-group">
            <label for="description">Deskripsi:</label>
            <textarea id="description" name="description" required></textarea>
          </div>

          <div class="form-group">
            <label for="photo">Foto:</label>
            <div id="camera-preview" style="display: none;">
              <video id="camera-stream" autoplay></video>
              <button type="button" id="capture-btn">Ambil Foto</button>
            </div>
            <canvas id="photo-canvas" style="display: none;"></canvas>
            <input type="file" id="photo" name="photo" accept="image/*" required>
            <button type="button" id="open-camera-btn">Buka Kamera</button>
            <small>Maksimal ukuran file: 1MB</small>
          </div>

          <div class="form-group">
            <label for="location">Lokasi:</label>
            <div id="map" style="height: 200px; margin-bottom: 10px;"></div>
            <input type="hidden" id="lat" name="lat">
            <input type="hidden" id="lon" name="lon">
            <small>Klik pada peta untuk memilih lokasi (opsional).</small>
          </div>

          <button type="submit">Tambah Story</button>
        </form>
      </section>
    `}async afterRender(){await this._presenter.init()}showError(t){const e=document.getElementById("form-alert");e.innerHTML=t,e.style.display="block",e.classList.add("error"),e.classList.remove("success")}showSuccess(t){const e=document.getElementById("form-alert");e.innerHTML=t,e.style.display="block",e.classList.add("success"),e.classList.remove("error")}async triggerNotification(t,e){const o="Story Added Successfully",r={body:e.length>50?e.substring(0,50)+"...":e,icon:"/favicon.png",badge:"/favicon-16x16.png",vibrate:[100,50,100],data:{url:"/#/"}};await t.showNotification(o,r)}cleanup(){if(this.stream){this.stream.getTracks().forEach(o=>o.stop()),this.stream=null;const t=document.getElementById("camera-preview"),e=document.getElementById("open-camera-btn");t&&(t.style.display="none"),e&&(e.style.display="block")}}initCamera(){const t=document.getElementById("open-camera-btn"),e=document.getElementById("camera-preview"),o=document.getElementById("camera-stream"),r=document.getElementById("capture-btn"),n=document.getElementById("photo-canvas"),s=document.getElementById("photo");t.addEventListener("click",async()=>{try{this.stream=await navigator.mediaDevices.getUserMedia({video:{width:1280,height:720,facingMode:"environment"}}),o.srcObject=this.stream,e.style.display="block",t.style.display="none"}catch(a){console.error("Gagal mengakses kamera:",a);try{this.stream=await navigator.mediaDevices.getUserMedia({video:!0}),o.srcObject=this.stream,e.style.display="block",t.style.display="none"}catch(c){console.error("Fallback kamera gagal:",c),alert("Gagal mengakses kamera. Pastikan Anda memberikan izin.")}}}),r.addEventListener("click",()=>{const c=800/o.videoWidth;n.width=800,n.height=o.videoHeight*c,n.getContext("2d").drawImage(o,0,0,n.width,n.height);const f=l=>{n.toBlob(P=>{P.size<=1e6||l<=.3?this.createImageFile(P,s):f(l-.1)},"image/jpeg",l)};f(.7),this.stream&&(this.stream.getTracks().forEach(l=>l.stop()),this.stream=null),e.style.display="none",t.style.display="block"})}createImageFile(t,e){const o=new File([t],"photo.jpg",{type:"image/jpeg",lastModified:Date.now()}),r=new DataTransfer;r.items.add(o),e.files=r.files,console.log("Ukuran file akhir:",(t.size/1024).toFixed(2),"KB")}initMap(){const t=L.map("map").setView([-6.1754,106.8272],13);L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:"© OpenStreetMap"}).addTo(t);let e=null;t.on("click",o=>{const{lat:r,lng:n}=o.latlng;e&&t.removeLayer(e),e=L.marker([r,n]).addTo(t),document.getElementById("lat").value=r,document.getElementById("lon").value=n})}}class de{constructor({view:t}){this._view=t}async init(){await this._loadFavorites()}async _loadFavorites(){const t=await I();if(!t||t.length===0){this._view.showEmptyFavorites();return}t.sort((e,o)=>o.favoriteTimestamp-e.favoriteTimestamp),this._view.showFavorites(t)}async removeFavorite(t,e){e.classList.add("removing"),setTimeout(async()=>{await M(t),e.remove(),document.querySelectorAll(".favorite-story-card").length===0&&this._view.showEmptyFavorites()},300)}}class ue{constructor(){this._presenter=new de({view:this})}async render(){return`
      <section class="container">
        <h1>Favorite Stories</h1>
        <div class="favorites-container">
          <div id="favorites-list"></div>
        </div>
      </section>
    `}async afterRender(){await this._presenter.init()}showEmptyFavorites(){const t=document.getElementById("favorites-list");t.innerHTML=`
      <div class="empty-favorites">
        <p>You don't have any favorite stories yet.</p>
        <a href="#/" class="btn-primary">Browse Stories</a>
      </div>
    `}showFavorites(t){const e=document.getElementById("favorites-list");e.innerHTML=t.map(o=>{const r=W(o.createdAt);return`
        <article class="favorite-story-card" data-id="${o.id}">
          <div class="favorite-story-content">
            <img src="${o.photoUrl}" alt="${o.description}" class="favorite-story-image">
            <div class="favorite-story-details">
              <h3>${o.name}</h3>
              <p>${o.description}</p>
              <p class="story-date"><small>Posted on: ${r}</small></p>
              <div class="favorite-actions">
                <button class="remove-favorite" data-id="${o.id}">Remove from Favorites</button>
              </div>
            </div>
          </div>
          ${o.lat&&o.lon?`
            <div class="story-map" id="favorite-map-${o.id}" style="height: 200px;"></div>
          `:""}
        </article>
      `}).join(""),document.querySelectorAll(".remove-favorite").forEach(o=>{o.addEventListener("click",()=>{const r=o.dataset.id,n=document.querySelector(`.favorite-story-card[data-id="${r}"]`);this._presenter.removeFavorite(r,n)})}),t.forEach(o=>{if(o.lat&&o.lon){const r=document.getElementById(`favorite-map-${o.id}`);if(r){const n=L.map(r).setView([o.lat,o.lon],13);L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(n),L.marker([o.lat,o.lon]).addTo(n).bindPopup(`<b>${o.name}</b><br>${o.description}`)}}})}}async function me(i,t){const e=await fetch("https://story-api.dicoding.dev/v1/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:i,password:t})}),o=await e.json();if(!e.ok)throw new Error(o.message||"Login failed");return o.loginResult.token}async function pe(i,t,e){const o=await fetch("https://story-api.dicoding.dev/v1/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:i,email:t,password:e})}),r=await o.json();if(!o.ok)throw new Error(r.message||"Registration failed");return r}function ge(){localStorage.removeItem("token"),window.location.hash="#/login"}class he{async render(){return`
      <section class="login-container">
        <h1>Login</h1>
        <div class="form-container">
          <form id="loginForm">
            <div class="form-group">
              <label for="email">Email</label>
              <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
              <label for="password">Password</label>
              <input type="password" id="password" name="password" required>
            </div>
            <div class="form-actions">
              <button type="submit" id="loginButton">Login</button>
            </div>
            <div class="form-footer">
              <p>Don't have an account? <a href="#/register">Register</a></p>
            </div>
            <div id="loginError" class="error-message"></div>
          </form>
        </div>
      </section>
    `}async afterRender(){const t=document.getElementById("loginForm"),e=document.getElementById("loginError");t.addEventListener("submit",async o=>{o.preventDefault();const r=document.getElementById("email").value,n=document.getElementById("password").value;try{const s=await me(r,n);localStorage.setItem("token",s),window.location.hash="#/"}catch(s){console.error("Login failed:",s),e.textContent=s.message||"Login failed. Please try again."}})}}class fe{async render(){return`
      <section class="register-container">
        <h1>Register</h1>
        <div class="form-container">
          <form id="registerForm">
            <div class="form-group">
              <label for="name">Name</label>
              <input type="text" id="name" name="name" required>
            </div>
            <div class="form-group">
              <label for="email">Email</label>
              <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
              <label for="password">Password</label>
              <input type="password" id="password" name="password" required minlength="8">
              <small>Password must be at least 8 characters long</small>
            </div>
            <div class="form-actions">
              <button type="submit" id="registerButton">Register</button>
            </div>
            <div class="form-footer">
              <p>Already have an account? <a href="#/login">Login</a></p>
            </div>
            <div id="registerError" class="error-message"></div>
          </form>
        </div>
      </section>
    `}async afterRender(){const t=document.getElementById("registerForm"),e=document.getElementById("registerError");t.addEventListener("submit",async o=>{o.preventDefault();const r=document.getElementById("name").value,n=document.getElementById("email").value,s=document.getElementById("password").value;try{await pe(r,n,s),alert("Registration successful! Please login."),window.location.hash="#/login"}catch(a){console.error("Registration failed:",a),e.textContent=a.message||"Registration failed. Please try again."}})}}const ye={"/":new se,"/about":new ae,"/form":new le,"/favorites":new ue,"/login":new he,"/register":new fe};function ve(i){const t=i.split("/");return{resource:t[1]||null,id:t[2]||null}}function we(i){let t="";return i.resource&&(t=t.concat(`/${i.resource}`)),i.id&&(t=t.concat("/:id")),t||"/"}function be(){return location.hash.replace("#","")||"/"}function Ee(){const i=be(),t=ve(i);return we(t)}var v,E,p,g,u,z,k,F;class Se{constructor({navigationDrawer:t,drawerButton:e,content:o}){b(this,u);b(this,v,null);b(this,E,null);b(this,p,null);b(this,g,null);w(this,v,o),w(this,E,e),w(this,p,t),y(this,u,z).call(this)}async renderPage(){const t=Ee(),e=ye[t];if(!e){console.error("Route not found:",t),window.location.hash="#/";return}if(d(this,g)&&d(this,g).cleanup)try{d(this,g).cleanup()}catch(o){console.error("Error cleaning up current page:",o)}try{const o=await e.render();if(document.startViewTransition&&!window.matchMedia("(prefers-reduced-motion: reduce)").matches)try{const r=document.startViewTransition(async()=>{d(this,v).innerHTML=o,await e.afterRender().catch(s=>{console.error("Error in afterRender:",s)}),w(this,g,e)});await Promise.race([r.ready,new Promise((s,a)=>setTimeout(()=>a(new Error("View transition timeout")),5e3))]).catch(s=>{console.warn("View transition ready phase issue:",s)}),Promise.race([r.updateCallbackDone,new Promise(s=>setTimeout(s,1e3))]).then(()=>{scrollTo({top:0,behavior:"instant"}),y(this,u,k).call(this)}).catch(s=>{console.warn("View transition update phase issue:",s),y(this,u,k).call(this)})}catch(r){console.error("View transition error:",r),d(this,v).innerHTML=o,await e.afterRender().catch(console.error),w(this,g,e),y(this,u,k).call(this)}else d(this,v).innerHTML=o,await e.afterRender().catch(console.error),w(this,g,e),y(this,u,k).call(this)}catch(o){console.error("Error rendering page:",o),d(this,v).innerHTML="<p>Error loading page content. Please try again.</p>"}}}v=new WeakMap,E=new WeakMap,p=new WeakMap,g=new WeakMap,u=new WeakSet,z=function(){d(this,E).addEventListener("click",()=>{d(this,p).classList.toggle("open")}),document.body.addEventListener("click",t=>{!d(this,p).contains(t.target)&&!d(this,E).contains(t.target)&&d(this,p).classList.remove("open"),d(this,p).querySelectorAll("a").forEach(e=>{e.contains(t.target)&&d(this,p).classList.remove("open")})})},k=async function(){"serviceWorker"in navigator&&"PushManager"in window&&await y(this,u,F).call(this);const t=document.getElementById("logout-button");t&&t.addEventListener("click",()=>{ge()})},F=async function(){if(!localStorage.getItem("token"))return;const e=await q();let o=document.getElementById("notification-toggle");if(!o){o=document.createElement("button"),o.id="notification-toggle",o.style.marginLeft="10px";const r=document.getElementById("nav-list");if(r){const n=document.createElement("li");n.appendChild(o),r.appendChild(n)}}o.textContent=e?"Disable Notifications":"Enable Notifications",o.style.backgroundColor=e?"#e74c3c":"#2ecc71",o.style.color="white",o.style.border="none",o.style.padding="8px 16px",o.style.borderRadius="4px",o.style.cursor="pointer",o.onclick=async()=>{e?(await V(),alert("Notifications disabled")):(await B(),alert("Notifications enabled")),await y(this,u,F).call(this)}};document.addEventListener("DOMContentLoaded",async()=>{const i=new Se({content:document.querySelector("#main-content"),drawerButton:document.querySelector("#drawer-button"),navigationDrawer:document.querySelector("#navigation-drawer")});await i.renderPage(),window.addEventListener("hashchange",async()=>{await i.renderPage()})});const ke=async()=>{if(!("serviceWorker"in navigator))return console.warn("No Service Worker support!"),null;try{const i="/dicoding_web_intermidate_lastproject/",t=window.location.pathname.startsWith(i),e=t?`${i}sw.js`:"/sw.js";console.log("Registering service worker at path:",e);try{const r=await navigator.serviceWorker.getRegistrations();for(const n of r)await n.unregister(),console.log("Unregistered previous service worker")}catch(r){console.warn("Error unregistering service workers:",r)}const o=await navigator.serviceWorker.register(e,{scope:t?i:"/"});return console.log("Service Worker registered with scope:",o.scope),o}catch(i){return console.error("Service worker registration failed:",i),null}},Pe=async()=>{if(!("serviceWorker"in navigator)||!("PushManager"in window)){console.warn("Push notifications not supported");return}try{if(!localStorage.getItem("token")){console.log("User not logged in, skipping push setup");return}const t=await navigator.serviceWorker.ready;console.log("Service worker is ready for push subscription");const{subscribeToPushNotification:e}=await Y(async()=>{const{subscribeToPushNotification:r}=await Promise.resolve().then(()=>ie);return{subscribeToPushNotification:r}},void 0);await e()?console.log("Successfully subscribed to push notifications"):console.warn("Failed to subscribe to push notifications")}catch(i){console.error("Error setting up push notifications:",i)}},Le=async()=>{try{await ke()&&(console.log("Service Worker registered successfully"),await Pe())}catch(i){console.error("Error initializing PWA:",i)}};window.addEventListener("load",Le);
