const a="offline-v1",n=self.location.pathname.replace("sw.js",""),r=`${n}index.html`,l=[`${n}`,`${n}index.html`,`${n}favicon.png`,`${n}favicon-16x16.png`,`${n}favicon-32x32.png`],h=async()=>{const e=await caches.open(a),o=l.map(c=>e.add(c).catch(t=>{console.warn(`Failed to cache ${c}:`,t)}));return Promise.all(o)};self.addEventListener("install",e=>{console.log("Service Worker installing..."),e.waitUntil(h().then(()=>self.skipWaiting()))});self.addEventListener("activate",e=>(console.log("Service Worker activating..."),e.waitUntil(caches.keys().then(o=>Promise.all(o.map(c=>{if(c!==a)return caches.delete(c)})))),self.clients.claim()));self.addEventListener("fetch",e=>{e.request.mode==="navigate"?e.respondWith(fetch(e.request).catch(()=>caches.match(r)||caches.match(`${n}index.html`)||new Response("You are offline"))):e.respondWith(caches.match(e.request).then(o=>{if(o)return o;const c=e.request.clone();return fetch(c).then(t=>{if(!t||t.status!==200||t.type!=="basic")return t;const i=t.clone();return caches.open(a).then(s=>{s.put(e.request,i)}),t}).catch(()=>e.request.url.match(/\.(jpg|jpeg|png|gif|svg)$/)?caches.match(`${n}favicon.png`):new Response("Resource not available offline"))}))});self.addEventListener("push",e=>{console.log("[Service Worker] Push received",e);let o="New Story Notification",c={body:"You have a new story update",icon:`${n}favicon.png`,badge:`${n}favicon-16x16.png`,vibrate:[100,50,100]};if(e.data)try{const t=e.data.text();console.log("Push event data received:",t);try{const i=JSON.parse(t);console.log("Push data parsed:",i),i.title&&(o=i.title),i.options&&(c={...c,...i.options})}catch{console.log("Not valid JSON, using as plain text:",t),c.body=t}}catch(t){console.error("Error processing push data:",t)}console.log("Showing notification with:",{title:o,options:c}),e.waitUntil(self.registration.showNotification(o,c).catch(t=>console.error("Error showing notification:",t)))});self.addEventListener("notificationclick",e=>{console.log("[Service Worker] Notification click received",e),e.notification.close(),e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then(o=>o.length>0?o[0].focus():clients.openWindow(n)))});
